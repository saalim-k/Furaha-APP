// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//after update run this in terminal npx prisma migrate dev --name init
//to run the prisma studio run npx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//for context the app being built is for users to post adverts and for other users to interact buy or ask
//user model
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  emailVerified DateTime?
  image     String?
  accounts  Account[]
  sessions  Session[]
  role      Role   @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

//user role
enum Role {
  USER
  ADMIN
}

//advert model 
//one user many adverts 
//one category many adverts 
//one advert many images
//one advert many categories
model Advert {
  id          String        @id @default(uuid())
  title       String
  description String
  price       Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  images      AdvertImage[]
}

//advert image model
model AdvertImage {
  id        String   @id @default(uuid())
  url       String
  advertId  String
  advert    Advert   @relation(fields: [advertId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//categories
model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
